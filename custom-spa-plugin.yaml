apiVersion: v1
kind: ConfigMap
metadata:
  namespace: kong
  name: kong-plugin-custom-spa
data:
  schema.lua: |
    -- For accessing Kong varibales during runtime.
    local kong          = kong
    local spa_helpers   = require "kong.plugins.custom-spa-plugin.spa_helpers"
    -- A storage place for default HTML strings.
    local defaultHtml   = "<!DOCTYPE html><html><body><h1>200 - Success</h1></body></html>"

    -- This function is able to check if table contains a certain value and it not empty.
    local function setContains(set, key)
      -- A userdata object is a reference to the uderlying C language.
      -- My investigation shows that the type is userdata when the user did not enter any value.
      -- Never seeing this type before? Read about it here: https://www.lua.org/pil/28.1.html
      return (set[key] ~= nil and type(set[key]) ~= "userdata" and set[key] ~= "")
    end

    -- Schema represents the required items to serve in the Admin GUI when configuring a plugin.
    local schema = {
      -- The name is always defined by the parent folder name.
      name = "custom-spa-plugin",
      fields = {
        { config = {
            -- The 'config' record is the custom part of the plugin schema.
            type = "record",
            fields = {
              -- Each object within this level should be a uniquie variable item { variable_name = {} }
              { body = { 
                  -- Each K/V pair within the variable name object should be variable property.
                  -- All properties are under this part of the docs: 
                  -- https://docs.konghq.com/gateway/2.8.x/plugin-development/plugin-configuration/#describing-your-configuration-schema
                  type    = "string", 
                  default = defaultHtml
                }
              },
              -- This value is used directly to append to each Content-Type header in every response.
              -- TODO: Replace this with the https://github.com/wbond/puremagic. 
              { content_type = { 
                  type     = "string", 
                  required = true,
                  default  = "text/html"
                }
              },
              { file = { 
                  type = "string", 
                  -- Custom validator provides a way for creating custom functions to parse the data.
                  custom_validator = spa_helpers.validate_path, 
                } 
              },
              { source = {
                  -- When using a one_of property this allows the frontend to show a drop-down selection box.
                  required = true,
                  type     = "string",
                  one_of   = { "body", "file" },
                  default  = "body"
                }
              },
            },
          },
        },
      },
      -- This part of the object is used by the validation when clicking the create or update button.
      entity_checks = {
        { custom_entity_check = {
            field_sources = { "config" },
            -- This function is called when the user clicks the create or update button.
            -- entity = {"config":{"body":"string","file":"string","source":"string"}}
            fn = function(entity)
              -- config = {"body":"string","file":"string","source":"string"}
              local config = entity.config
              -- file = "string" | null
              local file   = config.file
              -- body = "string" | null
              local body   = config.body
              -- source = "string"
              local source = config.source
              -- When the user selected the file drop-down option.
              if (source == "file") then
                -- Validate the portal is enabled.
                if not spa_helpers.is_portal_enabled_and_workspace_activated() then
                  return nil, "The portal is not enabled in the configuration or in the workspace"
                end
                -- Ensure some string is written in the file field.
                if (not setContains(config, "file")) then
                  return nil, "The file field must be set when the source is " .. spa_helpers.escape_text("file")
                end
                -- Query the database to ensure the file exist.
                local finalFileObj, err = spa_helpers.get_file_by_path(file)
                if not finalFileObj then
                  -- For a non-existant file that does not mean an error occurred, if so return to user here.
                  if err then 
                    return nil, err
                  end
                  -- Since no file was found, return to user here.
                  return nil, "The file " .. spa_helpers.escape_text(file) .. " does not exist"
                end
              end
              -- When the user selected the body drop-down option.
              if (source == "body" and not setContains(config, "body")) then
                -- Returns a red error box to the Admin UI or HTTP response in the API.
                return nil, "The body field must be set when the source is " .. spa_helpers.escape_text("body")
              end
              -- If nothing has returned nil already, when the config is valid.
              return true
            end
          }
        }
      },
    }

    return schema

  spa_helpers.lua: |
    -- Library imports
    local kong             = kong
    local workspaces       = require "kong.workspaces"
    local cjson            = require "cjson"
    local workspace_config = require "kong.portal.workspace_config"
    local constants        = require "kong.constants"
    local file_helpers     = require "kong.portal.file_helpers"
    local PORTAL           = constants.WORKSPACE_CONFIG.PORTAL
    local validate_path    = require "kong.db.schema.entities.files".validate_path

    -- This function can accept test and return that text wrapped in escaped quotes
    function escape_text(text)
      return ("\""..text.."\"")
    end
    -- Check if the portal is enabled in both the config and the workspace
    function is_portal_enabled_and_workspace_activated()
      local ws = workspaces.get_workspace()
      local opts = { explicitly_ws = true }
      local enabled_in_ws = workspace_config.retrieve(PORTAL, ws, opts)
      local enabled_in_conf = kong.configuration.portal
      -- When testing with Pongo this ENV va is provided by the test framework
      -- Through Pongo it is impossible to enable the portal in the config
      local KONG_IN_TESTING = os.getenv("KONG_IS_TESTING") == "1"
      if not (enabled_in_conf or KONG_IN_TESTING) or not enabled_in_ws then
        return false
      end
      return true
    end
    -- Ask database for a file by a path
    function get_file_by_path(path)
      local file, err, err_t = kong.db.files:select_by_path(path)
      return file, err, err_t
    end
    -- Returns the extension of a file string with regex
    function get_file_extension(file)
      return file_helpers.get_ext(file)
    end
    -- Prints a table as string to the Kong default log phase
    function print_table_as_string(start_str, tbl, max, pos)
      if not pos then 
        print("[custom-spa-plugin] Starting print_table_as_string")
        pos = 0
      end
      if not max then max = 1 end
      if pos+1 > max then return end

      for a, b in pairs(tbl) do
        local lo = tostring(b)
        local str_loc = start_str.."."..a
        print("["..str_loc.."]: "..lo)
        if type(b) == "table" then
          print_table_as_string(str_loc, b, max, pos+1)
        end
      end
    end
    -- Custom implementation for integrating the Kong Cache with the Files DB
    -- The cache_key is a unique identifier generated by the database like "files:specs/httpbin.json:::::3a8c476f-c5aa-4b5e-b532-79a592d8492e"
    function load_file_by_key(cache_key)
      -- This is basic string manipulation to extract text BETWEEN the firsy two insantances of ":"
      local pos_a, pos_b = cache_key:find(":.-:")
      local extracted_path = cache_key:sub((pos_a+1), (pos_b-1))  -- +1 offsets beginning while -1 removes tail
      local file, err = kong.db.files:select_by_path(extracted_path)
      if not file then
        return nil, err
      end
      return file
    end
    -- This is a custom function used by the access block to build an HTTP return packet
    function success_exit(body, content_type)
      kong.response.exit(200, body, {["Content-Type"] = content_type})
    end

    -- Tis helpers file does not use a typical module layout to ignore stateful functions
    -- Instead it is a file of localized functions which we return the pointers
    return {
      escape_text                               = escape_text,
      is_portal_enabled_and_workspace_activated = is_portal_enabled_and_workspace_activated,
      get_file_by_path                          = get_file_by_path,
      get_file_extension                        = get_file_extension,
      print_table_as_string                     = print_table_as_string,
      load_file_by_key                          = load_file_by_key,
      success_exit                              = success_exit,
      validate_path                             = validate_path
    }

  handler.lua: |
    -- The access block of code has been moved to a separate file
    local access = require "kong.plugins.custom-spa-plugin.access"
    -- These configuration items are required by the plugin.
    local CustomSpaPlugin = {
      PRIORITY = 0,
      VERSION  = "1.0.0",
    }
    -- Executed for every request from a client and before it is being proxied to the upstream service.
    function CustomSpaPlugin:access(conf)
      -- Call our execute function in the access module.
      access.execute(conf)
    end
    -- Return the handler
    return CustomSpaPlugin

  access.lua: |
    local kong             = kong
    local spa_helpers      = require "kong.plugins.custom-spa-plugin.spa_helpers"

    -- Defines this file as a module.
    local _M = {}

    -- Add our custom module finctions to the module table.
    function _M.execute(conf)
      local source = conf.source
      local ct     = conf.content_type
      if (source == "body") then
        return spa_helpers.success_exit(conf.body, ct)
      end
      if (source == "file") then
        -- These next 2 lines of code correlate to the Kong Cache
        -- More information can be found here: https://docs.konghq.com/gateway/2.8.x/plugin-development/entities-cache/
        -- Be sure to checkout the custom lookup function in spa_helpers.load_file_by_key
        local file_cache_key = kong.db.files:cache_key(conf.file)
        local file, err = kong.cache:get(file_cache_key, {ttl= 60}, -- Use 1 min refresh
                                      spa_helpers.load_file_by_key, file_cache_key)
        return spa_helpers.success_exit(file.contents, ct)
      end
    end

    -- Return this module.
    return _M